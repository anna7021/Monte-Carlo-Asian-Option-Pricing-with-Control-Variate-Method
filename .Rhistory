return(geo_asian_price)
}
# function to price asian call option using geometric asian call price as a control variate
price_asian_call_MC_control_variate <- function(S0, K, T, r, q, sigma, m, N) {
start_time <- proc.time()
delta_t <- T / m
sqrt_delta_t <- sqrt(delta_t)
Z <- matrix(rnorm(N * m), nrow = N, ncol = m)
drift <- (r - q - 0.5 * sigma^2) * delta_t
diffusion <- sigma * sqrt_delta_t * Z
W <- t(apply(diffusion, 1, cumsum))
log_S <- log(S0) + outer(rep(1, N), (r - q - 0.5 * sigma^2) * (delta_t * (1:m))) + W
S <- exp(log_S)
S_bar_arith <- rowMeans(S)
S_bar_geo <- exp(rowMeans(log(S)))
payoffs_arith <- pmax(S_bar_arith - K, 0)
# Calculate payoffs for geometric Asian call
payoffs_geo <- pmax(S_bar_geo - K, 0)
# Discount payoffs to present value
discounted_payoffs_arith <- exp(-r * T) * payoffs_arith
discounted_payoffs_geo <- exp(-r * T) * payoffs_geo
# Calculate analytical price of Geometric Asian Call
geo_asian_price <- price_geometric_asian_call(S0, K, T, r, q, sigma, m)
# Calculate covariance and variance for Control Variate
cov_xy <- cov(discounted_payoffs_arith, discounted_payoffs_geo)
var_y <- var(discounted_payoffs_geo)
# Optimal coefficient
theta <- cov_xy / var_y
# Calculate Control Variate estimator
control_variate_estimator <- discounted_payoffs_arith - theta * (discounted_payoffs_geo - geo_asian_price)
# Calculate option price using Control Variate
option_price_cv <- mean(control_variate_estimator)
std_error_cv <- sd(control_variate_estimator) / sqrt(N)
CI_lower_cv <- option_price_cv - 1.96 * std_error_cv
CI_upper_cv <- option_price_cv + 1.96 * std_error_cv
end_time <- proc.time()
comp_time <- (end_time - start_time)[["elapsed"]]
return(list(
N = N,
Option_Price_CV = round(option_price_cv, 2),
Standard_Error_CV = round(std_error_cv, 5),
Confidence_Interval_CV = c(round(CI_lower_cv, 2), round(CI_upper_cv, 2)),
Computation_Time_sec = round(comp_time, 4)
))
}
# Set parameters
S0 <- 100      # Initial asset price
K <- 100       # Strike price
T <- 1         # Time to maturity (in years)
r <- 0.10      # Risk-free rate
q <- 0         # Dividend yield
sigma <- 0.20  # Volatility
m <- 50        # Number of monitoring points
sample_sizes <- c(1000, 4000, 16000, 64000, 256000)
# Initialize a data frame to store results for control variant method
results_cv <- data.frame(
Sample_Size = numeric(),
Option_Price_CV = numeric(),
Standard_Error_CV = numeric(),
CI_Lower_CV = numeric(),
CI_Upper_CV = numeric(),
Computation_Time_sec = numeric(),
stringsAsFactors = FALSE
)
# Set the seed once before the loop
set.seed(123)
for (N in sample_sizes) {
cat("Processing N =", N, "...\n")
# Standard Monte Carlo
res_std <- price_asian_call_MC_standard(S0, K, T, r, q, sigma, m, N)
results_standard <- rbind(results_standard, data.frame(
Sample_Size = res_std$N,
Option_Price = res_std$Option_Price,
Standard_Error = res_std$Standard_Error,
CI_Lower = res_std$Confidence_Interval[1],
CI_Upper = res_std$Confidence_Interval[2],
Computation_Time_sec = res_std$Computation_Time_sec
))
# Monte Carlo with Control Variate
res_cv <- price_asian_call_MC_control_variate(S0, K, T, r, q, sigma, m, N)
results_cv <- rbind(results_cv, data.frame(
Sample_Size = res_cv$N,
Option_Price_CV = res_cv$Option_Price_CV,
Standard_Error_CV = res_cv$Standard_Error_CV,
CI_Lower_CV = res_cv$Confidence_Interval_CV[1],
CI_Upper_CV = res_cv$Confidence_Interval_CV[2],
Computation_Time_sec = res_cv$Computation_Time_sec
))
}
# Set parameters
S0 <- 100      # Initial asset price
K <- 100       # Strike price
T <- 1         # Time to maturity (in years)
r <- 0.10      # Risk-free rate
q <- 0         # Dividend yield
sigma <- 0.20  # Volatility
m <- 50        # Number of monitoring points
sample_sizes <- c(1000, 4000, 16000, 64000, 256000)
# Initialize a data frame to store results for control variant method
results_cv <- data.frame(
Sample_Size = numeric(),
Option_Price_CV = numeric(),
Standard_Error_CV = numeric(),
CI_Lower_CV = numeric(),
CI_Upper_CV = numeric(),
Computation_Time_sec = numeric(),
stringsAsFactors = FALSE
)
# Set the seed once before the loop
set.seed(123)
for (N in sample_sizes) {
cat("Processing N =", N, "...\n")
# Standard Monte Carlo
res_std <- price_asian_call_MC(S0, K, T, r, q, sigma, m, N)
results_standard <- rbind(results_standard, data.frame(
Sample_Size = res_std$N,
Option_Price = res_std$Option_Price,
Standard_Error = res_std$Standard_Error,
CI_Lower = res_std$Confidence_Interval[1],
CI_Upper = res_std$Confidence_Interval[2],
Computation_Time_sec = res_std$Computation_Time_sec
))
# Monte Carlo with Control Variate
res_cv <- price_asian_call_MC_control_variate(S0, K, T, r, q, sigma, m, N)
results_cv <- rbind(results_cv, data.frame(
Sample_Size = res_cv$N,
Option_Price_CV = res_cv$Option_Price_CV,
Standard_Error_CV = res_cv$Standard_Error_CV,
CI_Lower_CV = res_cv$Confidence_Interval_CV[1],
CI_Upper_CV = res_cv$Confidence_Interval_CV[2],
Computation_Time_sec = res_cv$Computation_Time_sec
))
}
# Set parameters
S0 <- 100      # Initial asset price
K <- 100       # Strike price
T <- 1         # Time to maturity (in years)
r <- 0.10      # Risk-free rate
q <- 0         # Dividend yield
sigma <- 0.20  # Volatility
m <- 50        # Number of monitoring points
sample_sizes <- c(1000, 4000, 16000, 64000, 256000)
# Initialize a data frame to store results for control variant method
results_cv <- data.frame(
Sample_Size = numeric(),
Option_Price_CV = numeric(),
Standard_Error_CV = numeric(),
CI_Lower_CV = numeric(),
CI_Upper_CV = numeric(),
Computation_Time_sec = numeric(),
stringsAsFactors = FALSE
)
# Set the seed once before the loop
set.seed(123)
for (N in sample_sizes) {
cat("Processing N =", N, "...\n")
# Standard Monte Carlo
res_std <- price_asian_call_MC(S0, K, T, r, q, sigma, m, N)
results_standard <- rbind(res_std, data.frame(
Sample_Size = res_std$N,
Option_Price = res_std$Option_Price,
Standard_Error = res_std$Standard_Error,
CI_Lower = res_std$Confidence_Interval[1],
CI_Upper = res_std$Confidence_Interval[2],
Computation_Time_sec = res_std$Computation_Time_sec
))
# Monte Carlo with Control Variate
res_cv <- price_asian_call_MC_control_variate(S0, K, T, r, q, sigma, m, N)
results_cv <- rbind(results_cv, data.frame(
Sample_Size = res_cv$N,
Option_Price_CV = res_cv$Option_Price_CV,
Standard_Error_CV = res_cv$Standard_Error_CV,
CI_Lower_CV = res_cv$Confidence_Interval_CV[1],
CI_Upper_CV = res_cv$Confidence_Interval_CV[2],
Computation_Time_sec = res_cv$Computation_Time_sec
))
}
# Set parameters
S0 <- 100      # Initial asset price
K <- 100       # Strike price
T <- 1         # Time to maturity (in years)
r <- 0.10      # Risk-free rate
q <- 0         # Dividend yield
sigma <- 0.20  # Volatility
m <- 50        # Number of monitoring points
sample_sizes <- c(1000, 4000, 16000, 64000, 256000)
results_standard <- data.frame(
Sample_Size = numeric(),
Option_Price = numeric(),
Standard_Error = numeric(),
CI_Lower = numeric(),
CI_Upper = numeric(),
Computation_Time_sec = numeric(),
stringsAsFactors = FALSE
)
results_cv <- data.frame(
Sample_Size = numeric(),
Option_Price_CV = numeric(),
Standard_Error_CV = numeric(),
CI_Lower_CV = numeric(),
CI_Upper_CV = numeric(),
Computation_Time_sec = numeric(),
stringsAsFactors = FALSE
)
for (N in sample_sizes) {
cat("Processing N =", N, "...\n")
# Standard Monte Carlo
res_std <- price_asian_call_MC(S0, K, T, r, q, sigma, m, N)
results_standard <- rbind(results_standard, data.frame(
Sample_Size = res_std$N,
Option_Price = res_std$Option_Price,
Standard_Error = res_std$Standard_Error,
CI_Lower = res_std$Confidence_Interval[1],
CI_Upper = res_std$Confidence_Interval[2],
Computation_Time_sec = res_std$Computation_Time_sec
))
# Monte Carlo with Control Variate
res_cv <- price_asian_call_MC_control_variate(S0, K, T, r, q, sigma, m, N)
results_cv <- rbind(results_cv, data.frame(
Sample_Size = res_cv$N,
Option_Price_CV = res_cv$Option_Price_CV,
Standard_Error_CV = res_cv$Standard_Error_CV,
CI_Lower_CV = res_cv$Confidence_Interval_CV[1],
CI_Upper_CV = res_cv$Confidence_Interval_CV[2],
Computation_Time_sec = res_cv$Computation_Time_sec
))
}
# Combine and display results
final_results <- merge(results_standard, results_cv, by = "Sample_Size")
print(final_results)
# Set parameters
S0 <- 100      # Initial asset price
K <- 100       # Strike price
T <- 1         # Time to maturity (in years)
r <- 0.10      # Risk-free rate
q <- 0         # Dividend yield
sigma <- 0.20  # Volatility
m <- 50        # Number of monitoring points
sample_sizes <- c(1000, 4000, 16000, 64000, 256000)
results_standard <- data.frame(
Sample_Size = numeric(),
Option_Price = numeric(),
Standard_Error = numeric(),
CI_Lower = numeric(),
CI_Upper = numeric(),
Computation_Time_sec = numeric(),
stringsAsFactors = FALSE
)
results_cv <- data.frame(
Sample_Size = numeric(),
Option_Price_CV = numeric(),
Standard_Error_CV = numeric(),
CI_Lower_CV = numeric(),
CI_Upper_CV = numeric(),
Computation_Time_sec = numeric(),
stringsAsFactors = FALSE
)
for (N in sample_sizes) {
# Standard Monte Carlo
res_std <- price_asian_call_MC(S0, K, T, r, q, sigma, m, N)
results_standard <- rbind(results_standard, data.frame(
Sample_Size = res_std$N,
Option_Price = res_std$Option_Price,
Standard_Error = res_std$Standard_Error,
CI_Lower = res_std$Confidence_Interval[1],
CI_Upper = res_std$Confidence_Interval[2],
Computation_Time_sec = res_std$Computation_Time_sec
))
# Monte Carlo with Control Variate
res_cv <- price_asian_call_MC_control_variate(S0, K, T, r, q, sigma, m, N)
results_cv <- rbind(results_cv, data.frame(
Sample_Size = res_cv$N,
Option_Price_CV = res_cv$Option_Price_CV,
Standard_Error_CV = res_cv$Standard_Error_CV,
CI_Lower_CV = res_cv$Confidence_Interval_CV[1],
CI_Upper_CV = res_cv$Confidence_Interval_CV[2],
Computation_Time_sec = res_cv$Computation_Time_sec
))
}
# Combine and display results
final_results <- merge(results_standard, results_cv, by = "Sample_Size", axis = 2)
print(final_results)
# Set parameters
S0 <- 100      # Initial asset price
K <- 100       # Strike price
T <- 1         # Time to maturity (in years)
r <- 0.10      # Risk-free rate
q <- 0         # Dividend yield
sigma <- 0.20  # Volatility
m <- 50        # Number of monitoring points
sample_sizes <- c(1000, 4000, 16000, 64000, 256000)
results_cv <- data.frame(
Sample_Size = numeric(),
Option_Price_CV = numeric(),
Standard_Error_CV = numeric(),
CI_Lower_CV = numeric(),
CI_Upper_CV = numeric(),
Computation_Time_sec = numeric(),
stringsAsFactors = FALSE
)
for (N in sample_sizes) {
# Monte Carlo with Control Variate
res_cv <- price_asian_call_MC_control_variate(S0, K, T, r, q, sigma, m, N)
results_cv <- rbind(results_cv, data.frame(
Sample_Size = res_cv$N,
Option_Price_CV = res_cv$Option_Price_CV,
Standard_Error_CV = res_cv$Standard_Error_CV,
CI_Lower_CV = res_cv$Confidence_Interval_CV[1],
CI_Upper_CV = res_cv$Confidence_Interval_CV[2],
Computation_Time_sec = res_cv$Computation_Time_sec
))
}
print(results_cv)
price_asian_call_MC <- function(S0, K, T, r, q, sigma, m, N) {
start_time <- proc.time()
delta_t <- T / m
sqrt_delta_t <- sqrt(delta_t)
# Generate N x m standard normal random variables
Z <- matrix(rnorm(N * m), nrow = N, ncol = m)
# Simulate log prices and then transform to prices
drift <- (r - q - 0.5 * sigma^2) * delta_t
diffusion <- sigma * sqrt_delta_t * Z
W <- t(apply(diffusion, 1, cumsum))
log_S <- log(S0) + outer(rep(1, N), drift * (1:m)) + W
S <- exp(log_S)
# Calculate arithmetic average and payoffs
S_bar <- rowMeans(S)
payoffs <- pmax(S_bar - K, 0)
discounted_payoffs <- exp(-r * T) * payoffs
# Estimate option price
option_price <- mean(discounted_payoffs)
std_error <- sd(discounted_payoffs) / sqrt(N)
# Calculate 95% confidence interval
CI_lower <- option_price - 1.96 * std_error
CI_upper <- option_price + 1.96 * std_error
end_time <- proc.time()
comp_time <- (end_time - start_time)[["elapsed"]]
return(list(
N = N,
Option_Price = round(option_price, 2),
Standard_Error = round(std_error, 5),
Confidence_Interval = c(round(CI_lower, 2), round(CI_upper, 2)),
Computation_Time_sec = round(comp_time, 4)
))
}
return(list(
N = N,
Option_Price = round(option_price, 2),
Standard_Error = round(std_error, 5),
Confidence_Interval = c(round(CI_lower, 2), round(CI_upper, 2)),
Computation_Time_sec = round(comp_time, 4)
))
```{r}
price_asian_call_MC <- function(S0, K, T, r, q, sigma, m, N) {
start_time <- proc.time()
delta_t <- T / m
sqrt_delta_t <- sqrt(delta_t)
# Generate N x m standard normal random variables
Z <- matrix(rnorm(N * m), nrow = N, ncol = m)
# Simulate log prices and then transform to prices
drift <- (r - q - 0.5 * sigma^2) * delta_t
diffusion <- sigma * sqrt_delta_t * Z
W <- t(apply(diffusion, 1, cumsum))
log_S <- log(S0) + outer(rep(1, N), drift * (1:m)) + W
S <- exp(log_S)
# Calculate arithmetic average and payoffs
S_bar <- rowMeans(S)
payoffs <- pmax(S_bar - K, 0)
discounted_payoffs <- exp(-r * T) * payoffs
# Estimate option price
option_price <- mean(discounted_payoffs)
std_error <- sd(discounted_payoffs) / sqrt(N)
# Calculate 95% confidence interval
CI_lower <- option_price - 1.96 * std_error
CI_upper <- option_price + 1.96 * std_error
end_time <- proc.time()
comp_time <- (end_time - start_time)[["elapsed"]]
return(list(
N = N,
Option_Price = round(option_price, 2),
Standard_Error = round(std_error, 5),
Confidence_Interval = c(round(CI_lower, 2), round(CI_upper, 2)),
Computation_Time_sec = round(comp_time, 4)
))
}
# Set parameters
S0 <- 100      # Initial asset price
K <- 100       # Strike price
r <- 0.10      # Risk-free rate
m <- 50        # Number of monitoring points
# Display results in a table
print(standard_mc_results)
# Display results in a table
print(standard_mc_results)
# Set parameters
S0 <- 100      # Initial asset price
K <- 100       # Strike price
T <- 1         # Time to maturity (in years)
r <- 0.10      # Risk-free rate
q <- 0         # Dividend yield
sigma <- 0.20  # Volatility
m <- 50        # Number of monitoring points
sample_sizes <- c(1000, 4000, 16000, 64000, 256000)
# Initialize a data frame to store results
standard_mc_results <- data.frame(
Sample_Size = numeric(),
Option_Price = numeric(),
Standard_Error = numeric(),
CI_Lower = numeric(),
CI_Upper = numeric(),
Computation_Time_sec = numeric(),
stringsAsFactors = FALSE
)
# Set the seed once before the loop
set.seed(123)
# Loop through different sample sizes
for (N in sample_sizes) {
result <- price_asian_call_MC(S0, K, T, r, q, sigma, m, N)
standard_mc_results <- rbind(standard_mc_results, data.frame(
Sample_Size = N,
Option_Price = result$Option_Price,
Standard_Error = result$Standard_Error,
CI_Lower = result$Confidence_Interval[1],
CI_Upper = result$Confidence_Interval[2],
Computation_Time_sec = result$Computation_Time_sec
))
}
# Display results in a table
print(standard_mc_results)
library(ggplot2)
# Plot 1: Option Price vs. Sample Size
ggplot(results_cv, aes(x = Sample_Size, y = Option_Price_CV)) +
geom_line() +
geom_point() +
scale_x_log10() +  # Log scale for sample size
labs(
title = "Option Price vs. Sample Size",
x = "Sample Size (log scale)",
y = "Option Price (CV)"
) +
theme_minimal()
# Plot 2: Standard Error vs. Sample Size
ggplot(results_cv, aes(x = Sample_Size, y = Standard_Error_CV)) +
geom_line() +
geom_point() +
scale_x_log10() +  # Log scale for sample size
labs(
title = "Standard Error vs. Sample Size",
x = "Sample Size (log scale)",
y = "Standard Error (CV)"
) +
theme_minimal()
# Plot 3: Computation Time vs. Sample Size
ggplot(results_cv, aes(x = Sample_Size, y = Computation_Time_sec)) +
geom_line() +
geom_point() +
scale_x_log10() +  # Log scale for sample size
labs(
title = "Computation Time vs. Sample Size",
x = "Sample Size (log scale)",
y = "Computation Time (seconds)"
) +
theme_minimal()
library(ggplot2)
combined_option_price <- data.frame(
Sample_Size = rep(standard_mc_results$Sample_Size, 2),
Option_Price = c(standard_mc_results$Option_Price, results_cv$Option_Price_CV),
Method = rep(c("Standard MC", "Control Variate"), each = 5)
)
# Plot Option Price comparison
ggplot(combined_option_price, aes(x = Sample_Size, y = Option_Price, color = Method)) +
geom_line() +
geom_point() +
scale_x_log10() +
labs(
title = "Option Price Comparison",
x = "Sample Size (log scale)",
y = "Option Price"
) +
theme_minimal()
combined_standard_error <- data.frame(
Sample_Size = rep(standard_mc_results$Sample_Size, 2),
Standard_Error = c(standard_mc_results$Standard_Error, results_cv$Standard_Error_CV),
Method = rep(c("Standard MC", "Control Variate"), each = 5)
)
# Plot Standard Error comparison
ggplot(combined_standard_error, aes(x = Sample_Size, y = Standard_Error, color = Method)) +
geom_line() +
geom_point() +
scale_x_log10() +
labs(
title = "Standard Error Comparison",
x = "Sample Size (log scale)",
y = "Standard Error"
) +
theme_minimal()
combined_computation_time <- data.frame(
Sample_Size = rep(standard_mc_results$Sample_Size, 2),
Computation_Time_sec = c(standard_mc_results$Computation_Time_sec, results_cv$Computation_Time_sec),
Method = rep(c("Standard MC", "Control Variate"), each = 5)
)
# Plot Computation Time comparison
ggplot(combined_computation_time, aes(x = Sample_Size, y = Computation_Time_sec, color = Method)) +
geom_line() +
geom_point() +
scale_x_log10() +
labs(
title = "Computation Time Comparison",
x = "Sample Size (log scale)",
y = "Computation Time (seconds)"
) +
theme_minimal()
